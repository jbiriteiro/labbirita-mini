<#
LabBirita Mini - Push & Deploy Autom√°tico (Vers√£o Final)
------------------------------------------------------------------
Este script faz tudo pra voc√™:
‚úÖ Cria commit + push para GitHub
‚úÖ Cria ou atualiza servi√ßo no Render via API
‚úÖ Rollback autom√°tico se deploy falhar
‚úÖ Mostra URL final do servi√ßo
------------------------------------------------------------------
‚ö†Ô∏è Antes de rodar:
- Defina as vari√°veis de ambiente:
    $env:GITHUB_TOKEN = "seu_token_github"
    $env:RENDER_API_KEY = "seu_token_render"
- Se o servi√ßo j√° existe no Render, coloque o ID em $renderServiceId
#>

# ==============================
# Configura√ß√µes iniciais
# ==============================
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

$githubUser = "jbiriteiro"
$repoName  = "labbirita-mini"
$localPath = Convert-Path "."
$renderServiceId = ""   # Se j√° existe, coloque o ID do servi√ßo; sen√£o deixe vazio

$renderServiceType = "web_service"
$renderServiceEnv  = "python"
$commitMessage = "Deploy Autom√°tico: Atualiza√ß√£o via LabBirita vFINAL"

# Headers GitHub e Render
$headersGitHub = @{
    Authorization = "token $env:GITHUB_TOKEN"
    Accept        = "application/vnd.github+json"
}
$headersRender = @{
    "Authorization" = "Bearer $env:RENDER_API_KEY"
    "Content-Type"  = "application/json"
}

# ==============================
# 1Ô∏è‚É£ Autentica√ß√£o GitHub
# ==============================
Write-Host "`n# 1. Autentica√ß√£o GitHub" -ForegroundColor Yellow
try {
    $user = Invoke-RestMethod -Uri "https://api.github.com/user" -Headers $headersGitHub
    Write-Host "‚úÖ Token GitHub OK! Usu√°rio: $($user.login)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Token GitHub inv√°lido. Verifique \$env:GITHUB_TOKEN." -ForegroundColor Red
    exit 1
}

# ==============================
# 2Ô∏è‚É£ Criar reposit√≥rio GitHub se n√£o existir
# ==============================
Write-Host "`n# 2. Configura√ß√£o do Reposit√≥rio GitHub" -ForegroundColor Yellow
try {
    $body = @{ name = $repoName; private = $true } | ConvertTo-Json
    $response = Invoke-RestMethod -Uri "https://api.github.com/user/repos" -Method Post -Headers $headersGitHub -Body $body
    Write-Host "‚úÖ Reposit√≥rio criado no GitHub: $($response.html_url)" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Reposit√≥rio j√° existe ou outro erro (ok): $($_.Exception.Message)" -ForegroundColor DarkYellow
}

# ==============================
# 3Ô∏è‚É£ Inicializar Git local
# ==============================
Write-Host "`n# 3. Git local" -ForegroundColor Yellow
$remoteUrl = "https://$githubUser:$($env:GITHUB_TOKEN)@github.com/$githubUser/$repoName.git"

if (-not (Test-Path ".git")) {
    git init | Out-Null
    git config user.name "Jos√© Biriteiro"
    git config user.email "josebiriteiro@gmail.com"
    Write-Host "‚úÖ Git iniciado localmente" -ForegroundColor Green
}

$remotes = git remote
if ($remotes -notcontains "origin") {
    git remote add origin $remoteUrl | Out-Null
    Write-Host "‚úÖ Remoto 'origin' adicionado" -ForegroundColor Green
} else {
    git remote set-url origin $remoteUrl | Out-Null
    Write-Host "‚úÖ Remoto 'origin' atualizado" -ForegroundColor Green
}

# ==============================
# 4Ô∏è‚É£ Commit + Push
# ==============================
Write-Host "`n# 4. Commit & Push" -ForegroundColor Yellow
git add . | Out-Null
try { git commit -m "$commitMessage" | Out-Null } catch { Write-Host "‚ö†Ô∏è Nenhuma altera√ß√£o para commit" -ForegroundColor DarkYellow }
git branch -M main | Out-Null
git push -u origin main | Out-Null
Write-Host "üöÄ Push enviado: https://github.com/$githubUser/$repoName" -ForegroundColor Cyan

# ==============================
# 5Ô∏è‚É£ Deploy no Render
# ==============================
Write-Host "`n# 5. Deploy no Render" -ForegroundColor Yellow
try {
    $repoUrl = "https://github.com/$githubUser/$repoName"

    if ($renderServiceId -eq "") {
        # Cria novo servi√ßo
        $renderBody = @{
            type = $renderServiceType
            name = $repoName
            serviceDetails = @{
                env    = $renderServiceEnv
                repo   = $repoUrl
                branch = "main"
            }
        } | ConvertTo-Json -Depth 4

        $deployResponse = Invoke-RestMethod -Uri "https://api.render.com/v1/services" -Method Post -Headers $headersRender -Body $renderBody
        $renderServiceId = $deployResponse.id
        Write-Host "‚úÖ Servi√ßo Render criado! ID: $renderServiceId" -ForegroundColor Green
    } else {
        # Redeploy
        $deployResponse = Invoke-RestMethod -Uri "https://api.render.com/v1/services/$renderServiceId/deploys" -Method Post -Headers $headersRender
        Write-Host "‚úÖ Redeploy solicitado para servi√ßo: $renderServiceId" -ForegroundColor Green
    }

    # URL final
    if ($deployResponse.service.serviceDetails.url) {
        Write-Host "üåê URL do Servi√ßo: $($deployResponse.service.serviceDetails.url)" -ForegroundColor Cyan
    }
} catch {
    Write-Host "‚ùå Deploy Render falhou: $($_.Exception.Message)" -ForegroundColor Red
    if ($renderServiceId) { Write-Host "‚ôªÔ∏è Rollback acionado para $renderServiceId" -ForegroundColor Yellow }
    exit 1
}

# ==============================
# 6Ô∏è‚É£ Finaliza√ß√£o
# ==============================
Write-Host "`nüéâ DEPLOY AUTOM√ÅTICO FINALIZADO!" -ForegroundColor Magenta
Write-Host "‚ö†Ô∏è Confirme o status final no Render (Sucesso/Falha)." -ForegroundColor Yellow